// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @unique @default(uuid())
  firstName     String
  lastName      String
  email         String   @unique
  password      String
  emailVerified Boolean  @default(false)
  refreshTokens Token[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum TokenType {
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model Token {
  id          String   @id @default(uuid())
  token       String   @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  type        TokenType
  expires     DateTime
  blacklisted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
   id               Int      @id @default(autoincrement())
  // product_id      String
  title            String
  image            String?
  rank             Int?
  parentCategoryId Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  //  product     Product  @relation(fields: [product_id], references: [id])
  
}

model Tag {

  id               Int      @id @default(autoincrement())
  // product_id String
  title     String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
//  product     Product  @relation(fields: [product_id], references: [id])
 
}
model Product {
  id               String           @id @default(uuid())
  title            String
  body_html        String
  status           String?
  sortBy           String?
  image            String?
  product_type     String?
  vendor           String?
  costPrice        Float?
  cog              Float?
  recommendedPrice Float? 
  quantity         Int?
  weight           Float?
  sku              String?
  barcode          String?
  length           Float?
  width            Float?
  height           Float?
  tags             String?
  categories       String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  variants         ProductVariant[]
  images           ProductImage[]
}

model ProductImage {
  id         String    @id @default(uuid())
  url        String
  altText    String?
  product    Product   @relation(fields: [productId], references: [id])
  productId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}


model ProductVariant {
  id          String   @id @default(uuid())
  product_id  String
  title       String
  sku         String?
  cost        Float?
  cog         Float?
  quantity    Int?
  price       Float?
  option1     String?
  option2     String?
  option3     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Define the relation to the product
  product     Product  @relation(fields: [product_id], references: [id])
}
