generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @unique @default(uuid())
  firstName     String
  lastName      String
  email         String            @unique
  password      String
  emailVerified Boolean           @default(false)
  refreshTokens Token[] // Assuming Token is another model
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  roles         UserRole[]
  permissions   userPermissions[]

  @@map("users")
}

model Role {
  id        String     @id @unique @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @unique @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@map("userRoles")
}

model Permission {
  id          String            @id @unique @default(uuid())
  name        String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  permissions userPermissions[]

  @@map("permissions")
}

model userPermissions {
  id          String     @id @unique @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  permision   Permission @relation(fields: [permisionId], references: [id])
  permisionId String
}

// Define the available token types
enum TokenType {
  refresh
  reset_password
  verify_email
  // Add more token types if needed
}

// Define the Token model
model Token {
  id          String    @id @default(uuid())
  token       String    @unique
  user        User      @relation(fields: [userId], references: [id])
  userId      String // Assuming User model has id of type String
  type        TokenType
  expires     DateTime
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("tokens")
}


// Define the Category model
model Category {
  id       String  @id @unique @default(uuid())
  title    String
  image    String? // Assuming the image is stored as a URL
  rank     Int? // Assuming the rank is an integer
  parentId String? // Assuming parentId is a string

  // Define the one-to-many relationship with Subcategory
  subcategories Subcategory[]
}

// Define the Subcategory model
model Subcategory {
  id    String  @id @unique @default(uuid())
  title String
  image String? // Assuming the image is stored as a URL

  // Define the many-to-one relationship with Category
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Product {
  id              String   @id @default(uuid())
  product_id      String?
  store_id        String?
  parent_id       String?
  title           String?
  handle          String?
  vendor          String?
  product_type    String?
  tags            String?
  body_html       String?
  template_suffix String?
  published_scope String?
  image           String?
  images          String?
  option1         String?
  option2         String?
  option3         String?
  options         String?
  site_url        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Define the relation to product variants
  variants ProductVariant[]
}

model ProductVariant {
  id                   String   @id @default(uuid())
  store_id             String
  product_id           String
  variant_id           String?
  parent_variant_id    String?
  title                String?
  sku                  String?
  cost                 Float?
  price                Float?
  compare_at_price     Float?
  position             Int?
  inventory_policy     String?
  fulfillment_service  String?
  inventory_management String?
  option1              String?
  option2              String?
  option3              String?
  taxable              Boolean?
  barcode              String?
  weight               Float?
  weight_unit          String?
  inventory_item_id    String?
  inventory_quantity   Int?
  requires_shipping    Boolean?
  image_id             Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Define the relation to the product
  product Product @relation(fields: [product_id], references: [id])
}
