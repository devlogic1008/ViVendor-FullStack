// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @unique @default(uuid())
  firstName     String
  lastName      String
  email         String   @unique
  password      String
  emailVerified Boolean  @default(false)
  refreshTokens Token[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum TokenType {
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model Token {
  id          String    @id @default(uuid())
  token       String    @unique
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  type        TokenType
  expires     DateTime
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}



model Tag {
   id              String  @id @default(uuid())
  // product_id String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //  product     Product  @relation(fields: [product_id], references: [id])
}

model Category {
  id              String  @id @default(uuid())
  // product_id      String
  title            String
  image            String?
  rank             Int?
  parentCategoryId String?
  
  // productCategories ProductCategories[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  //  product     Product  @relation(fields: [product_id], references: [id])
}
model Product {
  id              String  @id @default(uuid())
  // product_id      String?
  // store_id        String?
  // parent_id       String?
  // template_suffix String?
  // published_scope String?
  title           String
  body_html       String?
  status          String?
  sortBy          String?

  product_type     String?
  vendor           String?
  costPrice        String?
  cog              String?
  recommendedPrice String?
  quantity         String?
  weight           String?
  sku              String?
  barcode          String?
  length           String?
  width            String?
  height           String?
  tags             String?

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  variants         ProductVariant[]
  images           ProductImage[]
  categories      ProductCategories[]
}
model ProductCategories {
  id          String     @id @default(uuid())
  title       String?
  product_id  String
  category_id String?
  product     Product    @relation(fields: [product_id], references: [id])
  // category    Category?   @relation(fields: [category_id], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}



model ProductImage {
  id        String   @id @default(uuid())
  url       String
  altText   String?
  product_id String?
  product   Product?  @relation(fields: [product_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id         String   @id @default(uuid())
  product_id String
  title      String?
  sku        String?
  cost       String?
  cog        String?
  quantity   String?
  price      String?
  option1    String?
  option2    String?
  option3    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Define the relation to the product
  product Product @relation(fields: [product_id], references: [id])
}
