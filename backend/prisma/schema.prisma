//ðŸ§©Don't Edit this file.âœ¨Generated in Tue Feb 20 2024 15:14:35 GMT+0500 (Pakistan Standard Time)âœ¨

generator client {
provider = "prisma-client-js"
}
datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
}

model User {
  // Unique identifier for the user
  id            String         @id @unique @default(uuid())
//  Fist name of the user
  firstName     String
// Last name of the user
  lastName      String
  // Unique email address of the user
  email         String         @unique
  // Password of the user
  password      String
//  verify email address of the user
  emailVerified Boolean        @default(false)
  // Array of refresh tokens associated with the user
  refreshTokens Token[]
  // Timestamp for when the user was created
  createdAt     DateTime       @default(now())
  // Timestamp for when the user was last updated
  updatedAt     DateTime       @updatedAt
}

// Define the available token types
enum TokenType {
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
  // Add more token types if needed
}

// Define the Token model
model Token {
  id          String        @id @default(uuid())
  token       String        @unique
  user        User          @relation(fields: [userId], references: [id])
  userId      String        // Assuming User model has id of type String
  type        TokenType
  expires     DateTime
  blacklisted Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// schema.prisma

// Define the Category model
model Category {
  id            String         @id @unique @default(uuid())
  title         String
  image         String?   // Assuming the image is stored as a URL
  rank          Int?      // Assuming rank is an integer

  // Define the one-to-many relationship with Subcategory
  subcategories Subcategory[]
}

// Define the Subcategory model
model Subcategory {
  id            String         @id @unique @default(uuid())
  title      String
  image      String?  // Assuming the image is stored as a URL

  // Define the many-to-one relationship with Category
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Product {
  id          String        @id @default(uuid())
  product_id       String?
  store_id         String?
  parent_id        String?
  title            String?
  handle           String?
  vendor           String?
  product_type     String?
  tags             String?
  body_html        String?
  template_suffix  String?
  published_scope  String?
  image            String?
  images           String?
  option1          String?
  option2          String?
  option3          String?
  options          String?
  site_url         String?
  created_at       DateTime?
  updated_at       DateTime?

  // Define the relation to product variants
  variants         ProductVariant[]
}



model ProductVariant {
  id          String        @id @default(uuid())
  store_id           String
  product_id         String
  variant_id         String?
  parent_variant_id  String?
  title              String?
  sku                String?
  cost               Float?
  price              Float?
  compare_at_price   Float?
  position           Int?
  inventory_policy   String?
  fulfillment_service String?
  inventory_management String?
  option1            String?
  option2            String?
  option3            String?
  taxable            Boolean?
  barcode            String?
  weight             Float?
  weight_unit        String?
  inventory_item_id  String?
  inventory_quantity Int?
  requires_shipping  Boolean?
  image_id           Int?
  created_at         DateTime?
  updated_at         DateTime?

  // Define the relation to the product
  product            Product  @relation(fields: [product_id], references: [id])
}
