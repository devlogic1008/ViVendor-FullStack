generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @unique @default(uuid())
  firstName     String
  lastName      String
  email         String           @unique
  password      String
  emailVerified Boolean          @default(false)
  refreshTokens Token[] // Assuming Token is another model
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  roles         UserRole[]
  permissions   userPermission[]

  @@map("users")
}

model Role {
  id        String     @id @unique @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @unique @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@map("userRoles")
}

model Permission {
  id          String           @id @unique @default(uuid())
  name        String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions userPermission[]

  @@map("permissions")
}

model userPermission {
  id          String     @id @unique @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  permission  Permission @relation(fields: [permisionId], references: [id])
  permisionId String

  @@map("user-permissions")
}

enum TokenType {
  refresh
  reset_password
  verify_email
  // Add more token types if needed
}

model Token {
  id          String    @id @default(uuid())
  token       String    @unique
  user        User      @relation(fields: [userId], references: [id])
  userId      String // Assuming User model has id of type String
  type        TokenType
  expires     DateTime
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("tokens")
}

model Category {
  id               Int      @id @default(autoincrement())
  // product_id      String
  title            String
  image            String?
  rank             Int?
  parentCategoryId Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  //  product     Product  @relation(fields: [product_id], references: [id])
  @@map("categories")
}

model Tag {
  id        Int      @id @default(autoincrement())
  // product_id String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //  product     Product  @relation(fields: [product_id], references: [id])
  @@map("tags")
}

model Product {
  id               String  @id @default(uuid())
  title            String
  body_html        String
  status           String?
  sortBy           String?
  image            String?
  product_type     String?
  vendor           String?
  costPrice        Int?
  cog              Int?
  recommendedPrice Int?
  quantity         Int?
  weight           Int?
  sku              String?
  barcode          String?
  length           Int?
  width            Int?
  height           Int?
  tags             String?
  categories       String?

  variants ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model ProductCategories {
  id         String  @id @default(uuid())
  product_id String?

  @@map("product-categories")
}

model ProductTags {
  id         String  @id @default(uuid())
  product_id String?

  @@map("product-tags")
}

model ProductVariant {
  id         String   @id @default(uuid())
  product_id String
  title      String
  sku        String?
  cost       Int?
  cog        Int?
  quantity   Int?
  price      Int?
  option1    String?
  option2    String?
  option3    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Define the relation to the product
  product Product @relation(fields: [product_id], references: [id])

  @@map("product-variant")
}
